name: Flask App CI

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python 3.9
      - name: Set up Python 3.12.6
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.6

      # Install dependencies from requirements.txt if it exists
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirement.txt ]; then pip install -r requirement.txt; fi

      # Create and activate virtual environment
      # - name: Set up Virtual Environment
      #   run: |
      #     python -m venv venv
      #     echo "Virtual environment created successfully."
      #     source venv/bin/activate
      #     echo "Virtual environment activated."

      # Install dependencies inside the virtual environment
      - name: Install dependencies in venv
        run: |
          pip install -r requirement.txt
        shell: bash
      - name: sasdf
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3306 # Optional, default value is 3306. The port of host
          container port: 3306 # Optional, default value is 3306. The port of container
          character set server: "utf8" # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          collation server: "utf8_general_ci" # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: "8.0" # Optional, default value is "latest". The version of the MySQL
          mysql database: "test" # Optional, default value is "test". The specified database which will be create
          # mysql root password: ${{ secrets.RootPassword }} # Required if "mysql user" is empty, default is empty. The root superuser password
          mysql user: "root" # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
          mysql password: Mysql%401522 # Required if "mysql user" exists. The password for the "mysql user"

      - name: Create
        run: |
          CREATE USER 'db_user'@'localhost' IDENTIFIED BY 'your_password';
          GRANT ALL PRIVILEGES ON my_database.* TO 'db_user'@'localhost';
          FLUSH PRIVILEGES;

      - name: Where
        run: |
          pwd
          ls
          python --version
        shell: bash

      - name: Chan
        run: |
          flask run

      - name: Flask
        run: |
          python run.py

      # Run HealthCheck Tests and check for errors
      - name: Run HealthCheck Tests
        run: |
          python -m unittest discover -s app/tests -p 'test_healthcheck.py' &> user_output.log
          cat user_output.log
          if grep -i 'AssertionError' user_output.log; then
            echo 'Test failed due to an AssertionError!'
            exit 1
          fi
        shell: bash

      # Run User API Tests and check for errors
      - name: Run User API Tests
        run: |
          python -m unittest discover -s app/tests -p 'test_user.py' &> user_output.log
          cat user_output.log
          if grep -i 'AssertionError' user_output.log; then
            echo 'Test failed due to an AssertionError!'
            exit 1
          fi
        shell: bash
